<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[myBuildingBlocks]]></title>
  <link href="http://antillas21.github.io/atom.xml" rel="self"/>
  <link href="http://antillas21.github.io/"/>
  <updated>2014-06-25T22:55:02-07:00</updated>
  <id>http://antillas21.github.io/</id>
  <author>
    <name><![CDATA[Jose Antonio Antillon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacking a CRUDy Controller]]></title>
    <link href="http://antillas21.github.io/blog/2014/06/25/hacking-a-crudy-controller/"/>
    <updated>2014-06-25T22:41:49-07:00</updated>
    <id>http://antillas21.github.io/blog/2014/06/25/hacking-a-crudy-controller</id>
    <content type="html"><![CDATA[<blockquote><p>An experiment on finding a way to create a base controller to inherit from when dealing mostly with CRUD operations.</p></blockquote>

<p>Have you noticed that if you are working on an app, and need to create an admin interface for it, most of the work to be performed is your typical create, update, destroy and list actions?</p>

<p>In my &ldquo;day-to-day work&rdquo; in Rails-based applications, this is typically the case. I bet the same case presents to you as well, and though I am aware of sound solutions like the <a href="https://github.com/gregbell/active_admin">ActiveAdmin</a> and <a href="https://github.com/sferik/rails_admin">RailsAdmin</a> gems, in some edge cases the queries returned by their default implementations always leave something to be desired.</p>

<p>Now, let&rsquo;s not confuse this with an attachment to the NIH (Not Invented Here) syndrome, but sometimes, having an in-house and flexible implementation is more than sufficient to achieve &ldquo;Just the Right Feature<sup>TM</sup>&rdquo;.</p>

<p>Getting back to day-to-day cases in controllers, specially in a Rails application, you can easily find a pattern:</p>

<ul>
<li>you need to retrieve a record to display it</li>
<li>you need to retrieve a record to edit/update it</li>
<li>you need to delete a record</li>
<li>you need to create a new record</li>
<li>you need to list all existing records</li>
</ul>


<p>Though one of Rails tenets is DRY (Don&rsquo;t Repeat Yourself), you find yourself adding similar actions across multiple controller files, only changing model and routes specific details.</p>

<h3>Let&rsquo;s see an example</h3>

<p>Suppose you&rsquo;re working in a Rails app that deals with a Books and Movies catalog (among other things). You will obviously need an interface to perform CRUD operations on these resources, so you start working your way through the first controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/admin/books_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Admin</span><span class="o">::</span><span class="no">BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="c1"># code to list all books</span>
</span><span class='line'>    <span class="c1"># could include logic for ordering, pagination, etc.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="c1"># code to retrieve a single book</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="c1"># code to instantiate a new book</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="c1"># code to instantiate and persist a new book</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">edit</span>
</span><span class='line'>    <span class="c1"># code to retrieve a single book</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="c1"># code to retrieve a single book</span>
</span><span class='line'>    <span class="c1"># and persist updated info</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="c1"># code to delete a single book</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">books_params</span>
</span><span class='line'>    <span class="c1"># rules for accepted params to pass to a book instance</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, comes the time to work on the next controller and you come up with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/admin/movies_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Admin</span><span class="o">::</span><span class="no">MoviesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="c1"># code to list all movies</span>
</span><span class='line'>    <span class="c1"># could include logic for ordering, pagination, etc.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="c1"># code to retrieve a single movie</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="c1"># code to instantiate a new movie</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="c1"># code to instantiate and persist a new movie</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">edit</span>
</span><span class='line'>    <span class="c1"># code to retrieve a single movie</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="c1"># code to retrieve a single movie</span>
</span><span class='line'>    <span class="c1"># and persist updated info</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="c1"># code to delete a single movie</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">movies_params</span>
</span><span class='line'>    <span class="c1"># rules for accepted params to pass to a movie instance</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then comes the time to work on another controller, and another, and another, and yet another controller&hellip; and if you pause for a moment and look at the big picture&hellip; you basically have only one controller repeated N times your models count.</p>

<p>How could we refactor these controllers into a flexible base use case? <br />Well, I recently had some time to read <a href="https://leanpub.com/growing-rails">Growing Rails Applications in Practice</a> and pretty much liked the suggestion on the <strong>&ldquo;Beautiful controllers&rdquo;</strong> chapter and decided to take it as a base to build upon&hellip; after practicing in an app I was developing at that moment, I came up with:</p>

<h3>A small step in refactoring</h3>

<p>Going back to our example&hellip; Let&rsquo;s declare a base controller and a mixable methods module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/admin/crud_methods.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Admin</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">CRUDMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">list_resources</span>
</span><span class='line'>      <span class="vi">@resources</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build_resource</span><span class="p">(</span><span class="n">attrs</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="vi">@resource</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">attrs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">load_resource</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@resource</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">save_resource</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@resource</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="n">success_action</span><span class="p">(</span><span class="s1">&#39;Successfully created resource.&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">error_action</span><span class="p">(</span><span class="vi">@resource</span><span class="p">,</span> <span class="ss">:new</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update_resource</span><span class="p">(</span><span class="n">attrs</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@resource</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">attrs</span><span class="p">)</span>
</span><span class='line'>        <span class="n">success_action</span><span class="p">(</span><span class="s1">&#39;Successfully updated resource.&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">error_action</span><span class="p">(</span><span class="vi">@resource</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">delete_resource</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">load_resource</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@resource</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>      <span class="n">destroy_success_action</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/controllers/admin/base.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Admin</span><span class="o">::</span><span class="no">BaseController</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Admin</span><span class="p">:</span><span class="ss">:CRUDMethods</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">NotImplementedError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">list_resources</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="n">build_resource</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">build_resource</span><span class="p">(</span><span class="n">accepted_params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">save_resource</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="n">load_resource</span><span class="p">(</span><span class="n">id_key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">edit</span>
</span><span class='line'>    <span class="n">load_resource</span><span class="p">(</span><span class="n">id_key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="n">load_resource</span><span class="p">(</span><span class="n">id_key</span><span class="p">)</span>
</span><span class='line'>    <span class="n">update_resource</span><span class="p">(</span><span class="n">accepted_params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="n">delete_resource</span><span class="p">(</span><span class="n">id_key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">model</span>
</span><span class='line'>    <span class="nb">fail</span><span class="p">(</span>
</span><span class='line'>      <span class="no">NotImplementedError</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Configure main ActiveRecord class to manage in this controller.&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">id_key</span>
</span><span class='line'>    <span class="nb">fail</span><span class="p">(</span>
</span><span class='line'>      <span class="no">NotImplementedError</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Configure params[:key] needed to retrieve a record for this controller.&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accepted_params</span>
</span><span class='line'>    <span class="nb">fail</span><span class="p">(</span>
</span><span class='line'>      <span class="no">NotImplementedError</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Configure the required key and accepted params for a record in this controller&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">success_action</span>
</span><span class='line'>    <span class="nb">fail</span><span class="p">(</span>
</span><span class='line'>      <span class="no">NotImplementedError</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Configure what to do when saving/updating a record succeeds.&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">error_action</span><span class="p">(</span><span class="n">resource</span><span class="p">,</span> <span class="n">view</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@resource</span> <span class="o">=</span> <span class="n">resource</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;Something went wrong.&#39;</span>
</span><span class='line'>    <span class="n">render</span> <span class="n">view</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy_success_action</span>
</span><span class='line'>    <span class="nb">fail</span><span class="p">(</span>
</span><span class='line'>      <span class="no">NotImplementedError</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Configure what to do when deleting a record succeeds.&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I know, I know&hellip; this looks like an awful lot of boilerplate&hellip; but bear with me for a second while I show you how the Books and Movies controllers will look like now that we have this base class in place.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controller/admin/books_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Admin</span><span class="o">::</span><span class="no">BooksController</span> <span class="o">&lt;</span> <span class="ss">Admin</span><span class="p">:</span><span class="ss">:BaseController</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">model</span>
</span><span class='line'>    <span class="no">Book</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">id_key</span>
</span><span class='line'>    <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accepted_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:book</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">:title</span><span class="p">,</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:isbn</span><span class="p">,</span> <span class="ss">:page_count</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:category</span><span class="p">,</span> <span class="ss">:etc</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">success_action</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">admin_book_path</span><span class="p">(</span><span class="vi">@resource</span><span class="p">),</span> <span class="ss">notice</span><span class="p">:</span> <span class="n">message</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy_success_action</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">admin_books_path</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="n">message</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/controllers/admin/movies_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Admin</span><span class="o">::</span><span class="no">MoviesController</span> <span class="o">&lt;</span> <span class="ss">Admin</span><span class="p">:</span><span class="ss">:BaseController</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">model</span>
</span><span class='line'>    <span class="no">Movie</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">id_key</span>
</span><span class='line'>    <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accepted_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:movie</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">:title</span><span class="p">,</span> <span class="ss">:director</span><span class="p">,</span> <span class="ss">:upc_code</span><span class="p">,</span> <span class="ss">:duration</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:category</span><span class="p">,</span> <span class="ss">:etc</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">success_action</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">admin_movie_path</span><span class="p">(</span><span class="vi">@resource</span><span class="p">),</span> <span class="ss">notice</span><span class="p">:</span> <span class="n">message</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy_success_action</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">admin_movies_path</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="n">message</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you take a look at the resulting controllers, you&rsquo;ll notice we have separated the things that change (params, model, routes, etc. on each derivative controller), from those that don&rsquo;t (the base CRUD methods). <em>I bet there&rsquo;s even a pattern name for this ; )</em></p>

<p>Now, suppose you need to work on building CRUD actions for a MusicAlbum controller&hellip; guess what that would look like? And the next controller you need to implement the same actions all over again?</p>

<p>Exactly&hellip; now that we have ourselves a base platform, we can re-use and override at will; do you need a more complicated logic in any of the actions? do you need to ensure your queries are database optimized when retrieving a collection or a single record and its associations? <br />Not a problem, simply override the method you need, be it the main CRUD-based action in the controller (<code>index, show, update, etc.</code>), or the abstract methods provided by the base controller or the mixable module (<code>load_resource, update_resource, etc.</code>) and voilá! you can have just the flexibility you need while keeping your eyes in the big picture.</p>

<p>While this is not a silver bullet design, I pretty much like what it provides so far. Let&rsquo;s not forget that we don&rsquo;t need all our controllers to inherit from this base controller; we need to evaluate the corresponding use case, but if CRUD operations is what you need repeated ad-infinitum in a uniform approach, why not take this approach for a spin?</p>

<p>Do you like what we&rsquo;ve done here? Do you have a different opinion or approach? I&rsquo;d love to know your comments on this topic. You can <a href="http://twitter.com/antillas21">tweet</a> or <a href="mailto:antillas21@gmail.com">email</a> me and start a conversation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned Writing My First Ruby Gem]]></title>
    <link href="http://antillas21.github.io/blog/2014/03/15/what-i-learned-writing-my-first-ruby-gem/"/>
    <updated>2014-03-15T15:56:18-07:00</updated>
    <id>http://antillas21.github.io/blog/2014/03/15/what-i-learned-writing-my-first-ruby-gem</id>
    <content type="html"><![CDATA[<p>Weeks ago, Marvel Comics announced the release of its Comics API. I&rsquo;ve always been fond of comics, and in the spirit of learning how to consume APIs, I thought this would be a great pet-project to work on: A gem that interacts with this API. You can access the <a href="https://github.com/antillas21/marvelite">end product here</a>.</p>

<p>So, I began working on an initial draft (paper mostly) after reading Marvel&rsquo;s Developer portal instructions about API requests.</p>

<p>My first steps into pulling data from Marvel&rsquo;s API was through the browser just passing query params in the url bar, and watching a JSON response appear in the window (I highly recommend the <a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc">JSON View</a> browser extension to enhance the experience).</p>

<p>My first gem release was nothing fancy or to be really proud of, merely two endpoints available (<code>/characters</code> and <code>/characters/:id</code>) and a rough sketch of how to add more endpoints in time&hellip; but hey, I released something into the public and just shortly after the API was available.</p>

<p>After one week of iterating over the gem design, working merely at night for a couple of hours each time, here are the lessons I learned from this:</p>

<ol>
<li>Agree on a public API for (potential) users.</li>
<li>Metaprogram for fun and profit.</li>
<li>Do you want people to contribute? Add tests!</li>
<li>Provide detailed documentation to users.</li>
<li>Add tests. Seriously, add tests!</li>
</ol>


<p>Let&rsquo;s elaborate on each of these points.</p>

<h3>Agree on a public API for users</h3>

<p>Perhaps it&rsquo;s because my programming experience is heavily influenced by Rails, when I started drafting how I wanted to expose methods in this gem, I decided to use sort of Rails-y conventions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">comics</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span><span class='line'><span class="n">characters</span><span class="p">(</span><span class="mi">234</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># and why not, the option to pass a character&#39;s name to retrieve it,</span>
</span><span class='line'><span class="c1"># because we don&#39;t know ids (not yet at least).</span>
</span><span class='line'><span class="n">character</span><span class="p">(</span><span class="s1">&#39;Spider-Man&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I realized I needed to implement a small router that should provide an API client with available routes, I thought it would be a good idea to implement them like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">comics_path</span>
</span><span class='line'><span class="n">comic_path</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span><span class='line'><span class="n">character_comics_path</span><span class="p">(</span><span class="mi">234</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># yes, a Rails like router ;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>These decisions influenced every line of code that came after them.</p>

<h3>Metaprogram for fun and profit</h3>

<p>When I was working on the gem, I had the opportunity to pair-program with <a href="https://github.com/igmarin">Ismael Marín</a>, a friend from the Bajío on Rails community. During our session, he pointed out that my (at the moment) current codebase could benefit from using metaprogramming tricks, which in the end will result in reducing the maintenance burden of adding new endpoints and functionality as the Marvel API makes them available.</p>

<p>And so, I went from manually-defined methods like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">## WARNING!: The following is fugly code. It has been refactored FTW :)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># code from the Marvelite::API::Router class</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">characters_path</span>
</span><span class='line'>  <span class="s2">&quot;/</span><span class="si">#{</span><span class="n">api_version</span><span class="si">}</span><span class="s2">/public/characters&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">character_path</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;/</span><span class="si">#{</span><span class="n">api_version</span><span class="si">}</span><span class="s2">/public/characters/</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">character_comics_path</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;/</span><span class="si">#{</span><span class="n">api_version</span><span class="si">}</span><span class="s2">/public/characters/</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">/comics&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># code from the Marvelite::API::Client class</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">characters</span><span class="p">(</span><span class="n">query_params</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;/</span><span class="si">#{</span><span class="n">api_version</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">router</span><span class="o">.</span><span class="n">characters_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:query</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="p">(</span><span class="n">query_params</span><span class="p">))</span>
</span><span class='line'>  <span class="n">build_response_object</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">character_comics</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">query_params</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">id</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span>
</span><span class='line'>    <span class="n">character</span> <span class="o">=</span> <span class="n">find_character_by_name</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">character</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">character</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;/</span><span class="si">#{</span><span class="n">api_version</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">router</span><span class="o">.</span><span class="n">character_comics_path</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:query</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="p">(</span><span class="n">query_params</span><span class="p">))</span>
</span><span class='line'>  <span class="n">build_response_object</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can already start discussing the burden this will create for maintenance, just by manually adding new methods to tackle access to all available API endpoints.</p>

<p>With just cause, you will be talking some sense to me to fix this ASAP. Just want to point out in my defense, that this was only exploratory code to have something out-the-door.</p>

<p>After some thinking, tweaking and refactoring, I ended up with something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># code from the Marvelite::API::Router class</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">add_route</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">endpoint</span><span class="p">)</span>
</span><span class='line'>  <span class="n">routes</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_path&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">,</span> <span class="ss">:endpoint</span> <span class="o">=&gt;</span> <span class="n">endpoint</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">routes</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>    <span class="n">endpoint</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">routes</span><span class="o">[</span><span class="nb">method</span><span class="o">][</span><span class="ss">:endpoint</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">params</span> <span class="o">=</span> <span class="o">*</span><span class="n">args</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">params</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>      <span class="n">params</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">p_key</span><span class="p">,</span> <span class="n">p_value</span><span class="o">|</span>
</span><span class='line'>        <span class="n">endpoint</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="s2">&quot;:</span><span class="si">#{</span><span class="n">p_key</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">p_value</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="s2">&quot;/</span><span class="si">#{</span><span class="n">api_version</span><span class="si">}#{</span><span class="n">endpoint</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># code from the Marvelite::API::Client class</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">build_methods</span>
</span><span class='line'>  <span class="vi">@router</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">_</span><span class="p">,</span> <span class="nb">hash</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">name</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:define_method</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>      <span class="n">params</span> <span class="o">=</span> <span class="n">process_arguments</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="n">fetch_response</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">build_response_object</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># just call build_methods on initialization, and voilá, our methods are there.</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see the finished files here: <a href="https://github.com/antillas21/marvelite/blob/master/lib/marvelite/api/router.rb">Marvelite::API::Router</a> and <a href="https://github.com/antillas21/marvelite/blob/master/lib/marvelite/api/client.rb">Marvelite::API::Client</a>.</p>

<p>The benefit of it all? I would only need to have a file where I would map the original API endpoints to a route-like structure my gem would understand.</p>

<p>There&rsquo;s still work to do, I must confess, but I think this is a good first step in the right direction. This way, I reduced the maintenance burden adding new API endpoints, just add a new line and it&rsquo;s done, how cool is that?</p>

<h3>Do you want people to contribute? Add tests!</h3>

<p>Since day one I started working on this, I invited my friends from the Mexicali Open Source community to join in and contribute if they thought like it.</p>

<p>Question was, how to be sure things work while having contributors get up to speed understanding the pieces of the gem? Easy, add tests and be descriptive about the functionality in place.</p>

<p>I think this would be better explained through an image, from one of the pull requests I received.</p>

<p><img class="image" src="http://antillas21.github.io/images/marvelite-pr-contribution.jpg"></p>

<p>Thinking back, someone commenting you have done adding endpoints an easy task, is the best compliment to decisions made when building the project&hellip; and definitively, that made my day.</p>

<h3>Provide detailed documentation to users</h3>

<p>As a developer, I spend most of the time making things that work and then refactor them&hellip; and most of the time, only me or another developer understands what I ended up with, either because you assume they&rsquo;ll consult specs or read the source.</p>

<p>So, I set as a personal goal, that as I would have no control over who may end up using my gem (maybe a seasoned developer that lives and breathes RTFM or a newbie developer, who knows), to write human, non-geek, non-developer exclusively, understandable documentation on how to use the gem.</p>

<p>I&rsquo;d like to say that I made it right, but I can&rsquo;t be sure. Although if I judge by the numbers in this image, I like to think, documentation has made a difference.</p>

<p><img class="image" src="http://antillas21.github.io/images/marvelite-rubygems-stats.jpg"></p>

<h3>Add tests. Seriously, add tests!</h3>

<p>You would think that in the Ruby/Rails community, where in every conference you attend to, everyone spreads the Gospel of Testing&hellip; truth be told, not everyone practices this.</p>

<p>I could count with the fingers in one hand, how many projects that I&rsquo;ve worked on, really abide by test-driven development. Yes, that few. And have been working on development projects for nearly 5 years now.</p>

<p>I will not argue about this point, and I will not say whoever doesn&rsquo;t practice TDD is wrong and even less I will not say I am strict practitioner of it, because truth be told, I am not.</p>

<p>But hey, not being a strict practitioner does not mean I don&rsquo;t want to become one. So, I set as a skill-building exercise to add tests to prove me (and potential contributors) that things worked as expected.</p>

<h4>Was it hard? was it fun? did it help?</h4>

<p>Yes, yes and yes.</p>

<p>Remember when I was discussing refactoring to make use of metaprogramming? Well, that wouldn&rsquo;t be possible nor an enjoyable task if it wasn&rsquo;t because of the tests in place to let me know when things broke in the course of refactoring.</p>

<p>Also, remember the pull request from above? It would have not been possible without, yes you guessed, the tests in place that explained another person what endpoint was being tested and how to replicate it to test another endpoint.</p>

<p>Overall, I must confess this has been an interesting journey and experience. I believe I have learned more in the course of a week working on a pet-project, than in months of contract work.</p>

<p>I&rsquo;m really looking forward for Marvel to add new endpoints or release a newer version of its API, to get back to the drawing board and address whatever issues may arise from the change.</p>

<p>The main topic after all this, I liked how pair-programming went out. And honestly, would like to experience more of it. So, if you have a pet project yourself and think maybe pairing could help you, let me know. I for sure, know it will be great for me.</p>
]]></content>
  </entry>
  
</feed>
